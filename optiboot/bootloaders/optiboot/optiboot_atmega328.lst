
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fe6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000be8  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e7b  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	11 24       	eor	r1, r1
    7e02:	d4 b7       	in	r29, 0x34	; 52
    7e04:	14 be       	out	0x34, r1	; 52
    7e06:	81 e0       	ldi	r24, 0x01	; 1
    7e08:	90 e0       	ldi	r25, 0x00	; 0
    7e0a:	d7 d0       	rcall	.+430    	; 0x7fba <eeprom_read_byte>
    7e0c:	c8 2f       	mov	r28, r24
    7e0e:	80 38       	cpi	r24, 0x80	; 128
    7e10:	31 f0       	breq	.+12     	; 0x7e1e <main+0x1e>
    7e12:	8d 2f       	mov	r24, r29
    7e14:	8d 70       	andi	r24, 0x0D	; 13
    7e16:	39 f0       	breq	.+14     	; 0x7e26 <main+0x26>
    7e18:	8d 2f       	mov	r24, r29
    7e1a:	c9 d0       	rcall	.+402    	; 0x7fae <appStart>
    7e1c:	04 c0       	rjmp	.+8      	; 0x7e26 <main+0x26>
    7e1e:	60 e0       	ldi	r22, 0x00	; 0
    7e20:	81 e0       	ldi	r24, 0x01	; 1
    7e22:	90 e0       	ldi	r25, 0x00	; 0
    7e24:	d2 d0       	rcall	.+420    	; 0x7fca <eeprom_write_byte>
    7e26:	82 e0       	ldi	r24, 0x02	; 2
    7e28:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7e2c:	88 e1       	ldi	r24, 0x18	; 24
    7e2e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7e32:	86 e0       	ldi	r24, 0x06	; 6
    7e34:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7e38:	82 e2       	ldi	r24, 0x22	; 34
    7e3a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7e3e:	c0 38       	cpi	r28, 0x80	; 128
    7e40:	11 f0       	breq	.+4      	; 0x7e46 <main+0x46>
    7e42:	8f e0       	ldi	r24, 0x0F	; 15
    7e44:	01 c0       	rjmp	.+2      	; 0x7e48 <main+0x48>
    7e46:	89 e2       	ldi	r24, 0x29	; 41
    7e48:	9d d0       	rcall	.+314    	; 0x7f84 <watchdogConfig>
    7e4a:	c0 e0       	ldi	r28, 0x00	; 0
    7e4c:	d0 e0       	ldi	r29, 0x00	; 0
    7e4e:	93 e0       	ldi	r25, 0x03	; 3
    7e50:	f9 2e       	mov	r15, r25
    7e52:	ee 24       	eor	r14, r14
    7e54:	e3 94       	inc	r14
    7e56:	25 e0       	ldi	r18, 0x05	; 5
    7e58:	d2 2e       	mov	r13, r18
    7e5a:	31 e1       	ldi	r19, 0x11	; 17
    7e5c:	c3 2e       	mov	r12, r19
    7e5e:	86 d0       	rcall	.+268    	; 0x7f6c <getch>
    7e60:	81 34       	cpi	r24, 0x41	; 65
    7e62:	71 f4       	brne	.+28     	; 0x7e80 <main+0x80>
    7e64:	83 d0       	rcall	.+262    	; 0x7f6c <getch>
    7e66:	18 2f       	mov	r17, r24
    7e68:	93 d0       	rcall	.+294    	; 0x7f90 <verifySpace>
    7e6a:	12 38       	cpi	r17, 0x82	; 130
    7e6c:	11 f4       	brne	.+4      	; 0x7e72 <main+0x72>
    7e6e:	82 e0       	ldi	r24, 0x02	; 2
    7e70:	05 c0       	rjmp	.+10     	; 0x7e7c <main+0x7c>
    7e72:	11 38       	cpi	r17, 0x81	; 129
    7e74:	11 f4       	brne	.+4      	; 0x7e7a <main+0x7a>
    7e76:	86 e0       	ldi	r24, 0x06	; 6
    7e78:	01 c0       	rjmp	.+2      	; 0x7e7c <main+0x7c>
    7e7a:	83 e0       	ldi	r24, 0x03	; 3
    7e7c:	70 d0       	rcall	.+224    	; 0x7f5e <putch>
    7e7e:	6c c0       	rjmp	.+216    	; 0x7f58 <main+0x158>
    7e80:	82 34       	cpi	r24, 0x42	; 66
    7e82:	11 f4       	brne	.+4      	; 0x7e88 <main+0x88>
    7e84:	84 e1       	ldi	r24, 0x14	; 20
    7e86:	03 c0       	rjmp	.+6      	; 0x7e8e <main+0x8e>
    7e88:	85 34       	cpi	r24, 0x45	; 69
    7e8a:	19 f4       	brne	.+6      	; 0x7e92 <main+0x92>
    7e8c:	85 e0       	ldi	r24, 0x05	; 5
    7e8e:	88 d0       	rcall	.+272    	; 0x7fa0 <getNch>
    7e90:	63 c0       	rjmp	.+198    	; 0x7f58 <main+0x158>
    7e92:	85 35       	cpi	r24, 0x55	; 85
    7e94:	41 f4       	brne	.+16     	; 0x7ea6 <main+0xa6>
    7e96:	6a d0       	rcall	.+212    	; 0x7f6c <getch>
    7e98:	c8 2f       	mov	r28, r24
    7e9a:	68 d0       	rcall	.+208    	; 0x7f6c <getch>
    7e9c:	d0 e0       	ldi	r29, 0x00	; 0
    7e9e:	d8 2b       	or	r29, r24
    7ea0:	cc 0f       	add	r28, r28
    7ea2:	dd 1f       	adc	r29, r29
    7ea4:	58 c0       	rjmp	.+176    	; 0x7f56 <main+0x156>
    7ea6:	86 35       	cpi	r24, 0x56	; 86
    7ea8:	21 f4       	brne	.+8      	; 0x7eb2 <main+0xb2>
    7eaa:	84 e0       	ldi	r24, 0x04	; 4
    7eac:	79 d0       	rcall	.+242    	; 0x7fa0 <getNch>
    7eae:	80 e0       	ldi	r24, 0x00	; 0
    7eb0:	e5 cf       	rjmp	.-54     	; 0x7e7c <main+0x7c>
    7eb2:	84 36       	cpi	r24, 0x64	; 100
    7eb4:	09 f0       	breq	.+2      	; 0x7eb8 <main+0xb8>
    7eb6:	32 c0       	rjmp	.+100    	; 0x7f1c <main+0x11c>
    7eb8:	59 d0       	rcall	.+178    	; 0x7f6c <getch>
    7eba:	58 d0       	rcall	.+176    	; 0x7f6c <getch>
    7ebc:	b8 2e       	mov	r11, r24
    7ebe:	56 d0       	rcall	.+172    	; 0x7f6c <getch>
    7ec0:	a8 2e       	mov	r10, r24
    7ec2:	00 e0       	ldi	r16, 0x00	; 0
    7ec4:	11 e0       	ldi	r17, 0x01	; 1
    7ec6:	52 d0       	rcall	.+164    	; 0x7f6c <getch>
    7ec8:	f8 01       	movw	r30, r16
    7eca:	81 93       	st	Z+, r24
    7ecc:	8f 01       	movw	r16, r30
    7ece:	be 12       	cpse	r11, r30
    7ed0:	fa cf       	rjmp	.-12     	; 0x7ec6 <main+0xc6>
    7ed2:	5e d0       	rcall	.+188    	; 0x7f90 <verifySpace>
    7ed4:	f5 e4       	ldi	r31, 0x45	; 69
    7ed6:	af 12       	cpse	r10, r31
    7ed8:	01 c0       	rjmp	.+2      	; 0x7edc <main+0xdc>
    7eda:	ff cf       	rjmp	.-2      	; 0x7eda <main+0xda>
    7edc:	fe 01       	movw	r30, r28
    7ede:	f7 be       	out	0x37, r15	; 55
    7ee0:	e8 95       	spm
    7ee2:	07 b6       	in	r0, 0x37	; 55
    7ee4:	00 fc       	sbrc	r0, 0
    7ee6:	fd cf       	rjmp	.-6      	; 0x7ee2 <main+0xe2>
    7ee8:	fe 01       	movw	r30, r28
    7eea:	a0 e0       	ldi	r26, 0x00	; 0
    7eec:	b1 e0       	ldi	r27, 0x01	; 1
    7eee:	8c 91       	ld	r24, X
    7ef0:	11 96       	adiw	r26, 0x01	; 1
    7ef2:	2c 91       	ld	r18, X
    7ef4:	11 97       	sbiw	r26, 0x01	; 1
    7ef6:	90 e0       	ldi	r25, 0x00	; 0
    7ef8:	92 2b       	or	r25, r18
    7efa:	0c 01       	movw	r0, r24
    7efc:	e7 be       	out	0x37, r14	; 55
    7efe:	e8 95       	spm
    7f00:	11 24       	eor	r1, r1
    7f02:	32 96       	adiw	r30, 0x02	; 2
    7f04:	12 96       	adiw	r26, 0x02	; 2
    7f06:	ba 12       	cpse	r11, r26
    7f08:	f2 cf       	rjmp	.-28     	; 0x7eee <main+0xee>
    7f0a:	fe 01       	movw	r30, r28
    7f0c:	d7 be       	out	0x37, r13	; 55
    7f0e:	e8 95       	spm
    7f10:	07 b6       	in	r0, 0x37	; 55
    7f12:	00 fc       	sbrc	r0, 0
    7f14:	fd cf       	rjmp	.-6      	; 0x7f10 <main+0x110>
    7f16:	c7 be       	out	0x37, r12	; 55
    7f18:	e8 95       	spm
    7f1a:	1e c0       	rjmp	.+60     	; 0x7f58 <main+0x158>
    7f1c:	84 37       	cpi	r24, 0x74	; 116
    7f1e:	71 f4       	brne	.+28     	; 0x7f3c <main+0x13c>
    7f20:	25 d0       	rcall	.+74     	; 0x7f6c <getch>
    7f22:	24 d0       	rcall	.+72     	; 0x7f6c <getch>
    7f24:	b8 2e       	mov	r11, r24
    7f26:	22 d0       	rcall	.+68     	; 0x7f6c <getch>
    7f28:	33 d0       	rcall	.+102    	; 0x7f90 <verifySpace>
    7f2a:	8e 01       	movw	r16, r28
    7f2c:	f8 01       	movw	r30, r16
    7f2e:	85 91       	lpm	r24, Z+
    7f30:	8f 01       	movw	r16, r30
    7f32:	15 d0       	rcall	.+42     	; 0x7f5e <putch>
    7f34:	ba 94       	dec	r11
    7f36:	b1 10       	cpse	r11, r1
    7f38:	f9 cf       	rjmp	.-14     	; 0x7f2c <main+0x12c>
    7f3a:	0e c0       	rjmp	.+28     	; 0x7f58 <main+0x158>
    7f3c:	85 37       	cpi	r24, 0x75	; 117
    7f3e:	39 f4       	brne	.+14     	; 0x7f4e <main+0x14e>
    7f40:	27 d0       	rcall	.+78     	; 0x7f90 <verifySpace>
    7f42:	8e e1       	ldi	r24, 0x1E	; 30
    7f44:	0c d0       	rcall	.+24     	; 0x7f5e <putch>
    7f46:	85 e9       	ldi	r24, 0x95	; 149
    7f48:	0a d0       	rcall	.+20     	; 0x7f5e <putch>
    7f4a:	8f e0       	ldi	r24, 0x0F	; 15
    7f4c:	97 cf       	rjmp	.-210    	; 0x7e7c <main+0x7c>
    7f4e:	81 35       	cpi	r24, 0x51	; 81
    7f50:	11 f4       	brne	.+4      	; 0x7f56 <main+0x156>
    7f52:	88 e0       	ldi	r24, 0x08	; 8
    7f54:	17 d0       	rcall	.+46     	; 0x7f84 <watchdogConfig>
    7f56:	1c d0       	rcall	.+56     	; 0x7f90 <verifySpace>
    7f58:	80 e1       	ldi	r24, 0x10	; 16
    7f5a:	01 d0       	rcall	.+2      	; 0x7f5e <putch>
    7f5c:	80 cf       	rjmp	.-256    	; 0x7e5e <main+0x5e>

00007f5e <putch>:
void putch(char ch) {
#ifndef SOFT_UART
#ifndef UDRE0
#define UDRE0 UDRE
#endif
  while (!(UART_SRA & _BV(UDRE0)));
    7f5e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f62:	95 ff       	sbrs	r25, 5
    7f64:	fc cf       	rjmp	.-8      	; 0x7f5e <putch>
  UART_UDR = ch;
    7f66:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7f6a:	08 95       	ret

00007f6c <getch>:
#endif
#ifndef FE0
#define FE0 FE
#endif

  while(!(UART_SRA & _BV(RXC0)))
    7f6c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f70:	87 ff       	sbrs	r24, 7
    7f72:	fc cf       	rjmp	.-8      	; 0x7f6c <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f74:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7f78:	84 fd       	sbrc	r24, 4
    7f7a:	01 c0       	rjmp	.+2      	; 0x7f7e <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f7c:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f7e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f82:	08 95       	ret

00007f84 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f84:	e0 e6       	ldi	r30, 0x60	; 96
    7f86:	f0 e0       	ldi	r31, 0x00	; 0
    7f88:	98 e1       	ldi	r25, 0x18	; 24
    7f8a:	90 83       	st	Z, r25
  WDTCSR = x;
    7f8c:	80 83       	st	Z, r24
    7f8e:	08 95       	ret

00007f90 <verifySpace>:
void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
    7f90:	ed df       	rcall	.-38     	; 0x7f6c <getch>
    7f92:	80 32       	cpi	r24, 0x20	; 32
    7f94:	19 f0       	breq	.+6      	; 0x7f9c <verifySpace+0xc>
    7f96:	88 e0       	ldi	r24, 0x08	; 8
    7f98:	f5 df       	rcall	.-22     	; 0x7f84 <watchdogConfig>
    7f9a:	ff cf       	rjmp	.-2      	; 0x7f9a <verifySpace+0xa>
    7f9c:	84 e1       	ldi	r24, 0x14	; 20
    7f9e:	df cf       	rjmp	.-66     	; 0x7f5e <putch>

00007fa0 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fa0:	cf 93       	push	r28
    7fa2:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fa4:	e3 df       	rcall	.-58     	; 0x7f6c <getch>
    7fa6:	c1 50       	subi	r28, 0x01	; 1
  verifySpace();
}
    7fa8:	e9 f7       	brne	.-6      	; 0x7fa4 <getNch+0x4>
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7faa:	cf 91       	pop	r28
    7fac:	f1 cf       	rjmp	.-30     	; 0x7f90 <verifySpace>

00007fae <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fae:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fb0:	80 e0       	ldi	r24, 0x00	; 0
    7fb2:	e8 df       	rcall	.-48     	; 0x7f84 <watchdogConfig>
    7fb4:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    7fb6:	ff 27       	eor	r31, r31
    7fb8:	09 94       	ijmp

00007fba <eeprom_read_byte>:
    7fba:	f9 99       	sbic	0x1f, 1	; 31
    // Jump to 'save' or RST vector
    "ldi r30,%[rstvec]\n"
    "clr r31\n"
    "ijmp\n"::[rstvec] "M"(appstart_vec)
  );
}
    7fbc:	fe cf       	rjmp	.-4      	; 0x7fba <eeprom_read_byte>
    7fbe:	92 bd       	out	0x22, r25	; 34
    7fc0:	81 bd       	out	0x21, r24	; 33
    7fc2:	f8 9a       	sbi	0x1f, 0	; 31
    7fc4:	99 27       	eor	r25, r25
    7fc6:	80 b5       	in	r24, 0x20	; 32
    7fc8:	08 95       	ret

00007fca <eeprom_write_byte>:
    7fca:	26 2f       	mov	r18, r22

00007fcc <eeprom_write_r18>:
    7fcc:	f9 99       	sbic	0x1f, 1	; 31
    7fce:	fe cf       	rjmp	.-4      	; 0x7fcc <eeprom_write_r18>
    7fd0:	1f ba       	out	0x1f, r1	; 31
    7fd2:	92 bd       	out	0x22, r25	; 34
    7fd4:	81 bd       	out	0x21, r24	; 33
    7fd6:	20 bd       	out	0x20, r18	; 32
    7fd8:	0f b6       	in	r0, 0x3f	; 63
    7fda:	f8 94       	cli
    7fdc:	fa 9a       	sbi	0x1f, 2	; 31
    7fde:	f9 9a       	sbi	0x1f, 1	; 31
    7fe0:	0f be       	out	0x3f, r0	; 63
    7fe2:	01 96       	adiw	r24, 0x01	; 1
    7fe4:	08 95       	ret
